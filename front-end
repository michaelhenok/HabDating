from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from datetime import timedelta

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///dating_app.db'
app.config['JWT_SECRET_KEY'] = 'your_secret_key'
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(days=1)

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
jwt = JWTManager(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    location = db.Column(db.String(100))
    age = db.Column(db.Integer)
    language = db.Column(db.String(100))
    work = db.Column(db.String(100))
    type = db.Column(db.String(100))

@app.before_first_request
def create_tables():
    db.create_all()

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    hashed_password = bcrypt.generate_password_hash(data['password']).decode('utf-8')
    new_user = User(
        username=data['username'],
        password=hashed_password,
        location=data['location'],
        age=data['age'],
        language=data['language'],
        work=data['work'],
        type=data['type']
    )
    db.session.add(new_user)
    db.session.commit()
    return jsonify(message="User registered successfully"), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(username=data['username']).first()
    if user and bcrypt.check_password_hash(user.password, data['password']):
        access_token = create_access_token(identity=user.id)
        return jsonify(access_token=access_token)
    return jsonify(message="Invalid credentials"), 401

@app.route('/match', methods=['POST'])
@jwt_required()
def match():
    current_user_id = get_jwt_identity()
    current_user = User.query.get(current_user_id)
    data = request.get_json()

    matches = User.query.filter(
        User.id != current_user.id,
        User.location == data.get('location', current_user.location),
        User.age == data.get('age', current_user.age),
        User.language == data.get('language', current_user.language),
        User.work == data.get('work', current_user.work),
        User.type == data.get('type', current_user.type)
    ).all()

    results = [
        {
            "username": user.username,
            "location": user.location,
            "age": user.age,
            "language": user.language,
            "work": user.work,
            "type": user.type
        } for user in matches
    ]
    return jsonify(matches=results)

if __name__ == '__main__':
    app.run(debug=True)
